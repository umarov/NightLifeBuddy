package nightlifebuddy.db;

import java.util.List;

import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.FilterOperator;

import nightlifebuddy.db.Venues;
import nightlifebuddy.db.Util;

/**
 * GAE ENTITY UTIL CLASS: "Events" <br>
 * PARENT: NONE <br>
 * KEY: An event long Id generated by GAE <br>
 * FEATURES: <br>
 * - "name" a {@link String} with the name of the event (e.g. "Fairfax event")<br>
 * - "address" a {@link String} with the address of the event (e.g. "4400 University Dr., Fairfax, VA 22030, USA") <br>
 * - "google-map-location" a {@link String} with the Google map coordinates (e.g. "United States@38.826182,-77.308211") <br>
 */

public class Events 
{
	
	/**
	   * Create or update Item for a particular product. Product entity has one to many
	   * relation-ship with Item entity
	   * 
	   * @param productName
	   *          : product name for which the item is created.
	   * @param itemName
	   *          : item name
	   * @param price
	   *          : price of the item
	   * @return
	   */
	  public static Entity createOrUpdateEvent(String venueName, String eventName, String price) {
	    Entity venue = Venues.getVenue(venueName);
	    Entity event = getSingleEvent(eventName);
	    if(event == null){
	    	event = new Entity("Event",venue.getKey());
	    	event.setProperty("name", eventName);
	    	event.setProperty("venue", venueName);
	    	event.setProperty("price", price);
	    }
	    else{
	      if (price != null && !"".equals(price)) {
	    	  event.setProperty("price", price);
	      }           
	    }
	    Util.persistEntity(event);
	    return event;
	  }

	  /**
	   * get All the items in the list
	   * 
	   * @param kind
	   *          : item kind
	   * @return all the items
	   */
	  public static Iterable<Entity> getAllEvents() {
	  	Iterable<Entity> entities = Util.listEntities("Event", null, null);
	  	return entities;
	  }

	  /**
	   * Get the item by name, return an Iterable
	   * 
	   * @param itemName
	   *          : item name
	   * @return Item Entity
	   */
	  public static Iterable<Entity> getEvent(String eventName) {
	  	Iterable<Entity> entities = Util.listEntities("Event", "name", eventName);
	  	return entities;
	  }

	  /**
	   * Get all the items for a product
	   * 
	   * @param kind
	   *          : item kind
	   * @param productName
	   *          : product name
	   * @return: all items of type product
	   */
	  public static Iterable<Entity> getItemsForVenue(String kind, String venueName) {
	    Key ancestorKey = KeyFactory.createKey("Venue", venueName);
	    return Util.listChildren("Event", ancestorKey);
	  }

	  /**
	   * get Item with item name
	   * @param itemName: get itemName
	   * @return  item entity
	   */
	  @SuppressWarnings("deprecation")
	public static Entity getSingleEvent(String eventName) {
	    Query query = new Query("Event");
	    query.addFilter("name", FilterOperator.EQUAL, eventName);
	    List<Entity> results = Util.getDatastoreServiceInstance().prepare(query).asList(FetchOptions.Builder.withDefaults());
	    if (!results.isEmpty()) {
	      return (Entity)results.remove(0);
	    }
	    return null;
	  }
	  
	  public static String deleteEvent(String eventKey)
	  {
	    Entity entity = getSingleEvent(eventKey);    
	    if(entity != null){
	      Util.deleteEntity(entity.getKey());
	      return("Item deleted successfully.");
	    } else
	      return("Item not found");      
	  }

	
}
